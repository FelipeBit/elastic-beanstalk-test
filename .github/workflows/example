name: CI & CD pipelines

on:
  push:
    branches:
      - 'main'
      - 'staging'

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: template.yaml

  STAGING_STACK_NAME: hubspot-adapter-staging
  STAGING_PIPELINE_EXECUTION_ROLE: arn:aws:iam::778385102525:role/aws-sam-cli-managed-staging-PipelineExecutionRole-1JBYEB116K39R
  STAGING_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::778385102525:role/aws-sam-cli-managed-stagi-CloudFormationExecutionR-TSQFMC4505U1
  STAGING_ARTIFACTS_BUCKET: aws-sam-cli-managed-staging-pipel-artifactsbucket-e81w3bmnrsdn
  STAGING_REGION: us-east-1

  PROD_STACK_NAME: hubspot-adapter-prod
  PROD_PIPELINE_EXECUTION_ROLE: arn:aws:iam::778385102525:role/aws-sam-cli-managed-producti-PipelineExecutionRole-14CPIGK4450R
  PROD_CLOUDFORMATION_EXECUTION_ROLE: arn:aws:iam::778385102525:role/aws-sam-cli-managed-produ-CloudFormationExecutionR-QFEY3JBBMBBD
  PROD_ARTIFACTS_BUCKET: aws-sam-cli-managed-production-pi-artifactsbucket-1gy3iijyrg2i5
  PROD_REGION: us-east-1

jobs:

  # ===================================================================
  # UNIT TESTS
  # ===================================================================
  
  unit-test:
    uses: ./.github/workflows/unit-test.yml

  # ===================================================================
  # BUILD & PACKAGE
  # ===================================================================

  build-and-package:
    needs: [unit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1

      - name: Build resources
        run: sam build --beta-features --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.STAGING_REGION }}
          role-to-assume: ${{ env.STAGING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to testing artifact buckets
        run: |
          sam package \
            --s3-bucket ${STAGING_ARTIFACTS_BUCKET} \
            --region ${STAGING_REGION} \
            --output-template-file packaged-staging.yaml

      - uses: actions/upload-artifact@v2
        with:
          name: packaged-staging.yaml
          path: packaged-staging.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to production artifact buckets
        run: |
          sam package \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --region ${PROD_REGION} \
            --output-template-file packaged-prod.yaml

      - uses: actions/upload-artifact@v2
        with:
          name: packaged-prod.yaml
          path: packaged-prod.yaml

  # ===================================================================
  # DEPLOY (STAGING)
  # ===================================================================

  deploy-staging:
    if: github.ref == 'refs/heads/staging'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
      - uses: actions/download-artifact@v2
        with:
          name: packaged-staging.yaml

      - name: Assume the staging pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.STAGING_REGION }}
          role-to-assume: ${{ env.STAGING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: staging-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to staging account
        run: |
          sam deploy --stack-name ${STAGING_STACK_NAME} \
            --template packaged-staging.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${STAGING_REGION} \
            --s3-bucket ${STAGING_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${STAGING_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides \
              Environment=staging

  # ===================================================================
  # DEPLOY (PRODUCTION)
  # ===================================================================

  deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: aws-actions/setup-sam@v1
      - uses: actions/download-artifact@v2
        with:
          name: packaged-prod.yaml

      - name: Assume the prod pipeline user role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.PROD_REGION }}
          role-to-assume: ${{ env.PROD_PIPELINE_EXECUTION_ROLE }}
          role-session-name: prod-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to production account
        run: |
          sam deploy --stack-name ${PROD_STACK_NAME} \
            --template packaged-prod.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${PROD_REGION} \
            --s3-bucket ${PROD_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${PROD_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides \
              Environment=production
